{"version":3,"sources":["shadow/react_native.cljs"],"mappings":";AAKA,GAAA,QAAAA,mCAAAC,gDAAAC;AAAA;AAAA,AAAA,AAASC,+BAAS,6CAAA,7CAACC;;AACnB,GAAA,QAAAJ,mCAAAC,gDAAAI;AAAA;AAAA,AAAA,AAASC,yCAAmB,6CAAA,7CAACF;;AAE7B;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAA,lCAAMG,4EA0BHC,OAAOC;AA1BV,AA2BE,IAAMC,oBAAY,CAAA,AAAAC,iDAAA,jCAAOR;AAAzB,AACE,AAACS,sBAAOT,6BAASM;;AAEjB,GAAA,GAAQC;AACN,IAAAG,qBAAA,AAAAF,gBAAiBL;AAAjB,AAAA,oBAAAO;AAAA,AAAA,eAAAA,XAAWJ;AAAX,AACE,OAAkBA;;AADpB;;;AAEA,IAAMK,OACA,yCAAA,zCAACC,gEAEM;AAAA,AACE,YAAA,RAASC;AAAT,AACE,OAACJ,sBAAON,uCAAmBU;4BAE/B;AAAA,AACE,oEAAA,7DAACJ,sBAAON;cAEV;AAAA,AACE,WAAA,AAAAK,PAAMM,uBAAMd;AAAZ,AACE,GAAI,AAACe,oBAAID;AACP,QAACA,qCAAAA,uCAAAA;;AACDA;;;AAdnB,AAgBE,OAACE,iEAAiCX,OAAO;AAAA,AAAOM","names":["js/shadow","js/shadow.react-native","js/shadow.react-native.root-ref","shadow.react-native/root-ref","cljs.core.atom","js/shadow.react-native.root-component-ref","shadow.react-native/root-component-ref","shadow.react-native/render-root","app-id","root","first-call?","cljs.core/deref","cljs.core/reset!","temp__5753__auto__","Root","js/shadow.js.shim.module$create_react_class","this","body","cljs.core/fn?","js/shadow.js.shim.module$react_native.AppRegistry.registerComponent"],"sourcesContent":["(ns shadow.react-native\n  (:require\n    [\"react-native\" :as rn]\n    [\"create-react-class\" :as crc]))\n\n(defonce root-ref (atom nil))\n(defonce root-component-ref (atom nil))\n\n(defn render-root\n  \"Renders the application root component in a hot-reloadable way,\n   should be called after every reload.\n\n   - app-id (string) is used as the AppRegister.registerComponent name\n     it cannot be changed after the first call and must match the configured\n     app name from react-native.\n   - root is expected to be a react element or a function producing one\n\n   Reagent example:\n\n   (ns my.app\n     (:require [shadow.react-native :refer (render-root)]\n               [reagent.core :as r]\n               [\\\"react-native\\\" :as rn))\n\n   (defn root []\n      [:> rn/View ...])\n\n   (defn ^:dev/after-load start []\n     (render-root \\\"AwesomeApp\\\" (r/as-element [root])))\n\n   (defn init []\n     (start))\n\n   with :init-fn my.app/init in the shadow-cljs.edn build config.\"\n  [app-id root]\n  (let [first-call? (nil? @root-ref)]\n    (reset! root-ref root)\n\n    (if-not first-call?\n      (when-let [root @root-component-ref]\n        (.forceUpdate ^js root))\n      (let [Root\n            (crc\n              #js {:componentDidMount\n                   (fn []\n                     (this-as this\n                       (reset! root-component-ref this)))\n                   :componentWillUnmount\n                   (fn []\n                     (reset! root-component-ref nil))\n                   :render\n                   (fn []\n                     (let [body @root-ref]\n                       (if (fn? body)\n                         (body)\n                         body)))})]\n\n        (rn/AppRegistry.registerComponent app-id (fn [] Root))))))\n"]}
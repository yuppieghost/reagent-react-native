{"version":3,"sources":["shadow/cljs/devtools/client/react_native.cljs"],"mappings":";AASA,AAAA,wDAAA,gEAAAA,xHAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sFAAA,tFAAMD,iGACFE;AADJ,AAEG,GAAMC;AAAN,AACE,mBAAA,ZAACC,0BAA6BF;;AADhC;;;;AAFH,CAAA,sFAAA,tFAAMF,iGAIFE,EAAEG;AAJN,AAKG,GAAMF;AAAN,AACE,mBAAA,ZAACC,0BAA6BF,EAAEG;;AADlC;;;;AALH,CAAA,gFAAA,hFAAML;;AAAN,AAQA,uDAAA,vDAAMM,sHAAaC;AAAnB,AACE,OAACC,iBAAoBD;;AAEvB,sDAAA,tDAAME,oHAAYC;AAAlB,AACE,IAAAC,aAAA,AAAAC,cAA2CF;IAA3CG,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,IAAAE,aAAA,AAAAH,kDAAAE;IAAAC,iBAAA,AAAAC,4BAAAD;UAAAA,NAAsCc;oBAAtC,AAAAZ,4CAAAF,eAAA,3EAAgBY;SAAhB,AAAAV,4CAAAF,eAAA,hEAA8Ba;AAA9B,AAAA,AACE,oFAAA,pFAACE,8FAAuBH;;AACxB,AAACI,gDAAoBF;;AACrB,AAACxB,qDAAY,iDAAA,JAAKuB,mEAAsBD;;AAH1C;AAAA,eAAAjB;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAI,qBAAA,AAAAP,cAAAD;AAAA,AAAA,GAAAQ;AAAA,AAAA,IAAAR,iBAAAQ;AAAA,AAAA,GAAA,AAAAC,6BAAAT;AAAA,IAAAU,kBAAA,AAAAC,sBAAAX;AAAA,AAAA,eAAA,AAAAY,qBAAAZ;eAAAU;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,aAAA,AAAAC,gBAAAf;IAAAc,iBAAA,AAAAR,4BAAAQ;UAAAA,NAAsCK;oBAAtC,AAAAZ,4CAAAO,eAAA,3EAAgBG;SAAhB,AAAAV,4CAAAO,eAAA,hEAA8BI;AAA9B,AAAA,AACE,oFAAA,pFAACE,8FAAuBH;;AACxB,AAACI,gDAAoBF;;AACrB,AAACxB,qDAAY,iDAAA,JAAKuB,mEAAsBD;;AAH1C;AAAA,eAAA,AAAAD,eAAAhB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAKF,wDAAA,xDAAMsB,wHAAcC,IAAIxB,QAAQyB;AAAhC,AACE,OAACC,2EACC,yDAAA,zDAACC,qDAAMH,4EAEL,WAAKI;AAAL,AACE,OAACP,oFAAa,CAAA,6DAAsBO;qDAHxC,wEAKE,WAAKA;AAAL,AACE,OAACP,oFAAa,CAAA,0DAAmBO;GANrC,4DAQE,WAAKA;AAAL,AACE,OAACP,oFAAa,CAAA,oDAAaO;SAVjC;AAAA,AAWG,OAAC7B,oDAAWC;GACbyB;;AAEJ,AAAA,gDAAA,wDAAArC,xGAAM8C;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mFAAAF;;;AAAA,AAAA,CAAA,qFAAA,rFAAME,gGAAQG;AAAd,AAAA;;;AAAA,CAAA,wEAAA,xEAAMH;;AAAN;AAAA,CAAA,kEAAA,WAAAC,7EAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAlC,cAAAiC;;;AAAA,AAEA,iEAAA,iFAAAG,lJAAME,0IAAuBC;AAA7B,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAhC,4BAAAgC;UAAAA,NAAmEf;WAAnE,AAAAhB,4CAAA+B,eAAA,lEAA6CG;kBAA7C,AAAAlC,4CAAA+B,eAAA,zEAAkDI;AAAlD,AACE,IAAAC,aAA0CF;IAA1CE,iBAAA,AAAArC,4BAAAqC;cAAA,AAAApC,4CAAAoC,eAAA,rEAAc5C;eAAd,AAAAQ,4CAAAoC,eAAA,tEAAsBC;eAAtB,AAAArC,4CAAAoC,eAAA,tEAA+BE;AAA/B,AAEE,GAAM,EAAKC,8CACA,EAAI,AAACC,uBAAOF,eAAUG;AADjC,AAGE,IAAMC,iBAAe,AAACC,sDAA0BT,KAAKC;AAArD,AAEE,GAAM,AAACzC,cAAIgD;AAAX,AACE,8EAAA,WAAAE,lFAACC,gDAAyBZ,QAAQS;AAAlC,AAAkD,iEAAAE,1DAAC7B,sDAAaC,qBAAMU;;;AADxE;;;AALJ;;;AASJ,uDAAA,vDAAMoB,sHAAanC;AAAnB,AACE,GAAI,gDAAA,hDAACoC,4DAAiB;AAEpB,OAACC,KAAQrC;;AAGT,gBAAsBA;;;AAE1B,gEAAA,iFAAAsC,jJAAMI,wIAAsBC;AAA5B,AAAA,IAAAJ,aAAAD;IAAAE,aAAA,AAAAzD,cAAAwD;IAAAE,eAAA,AAAA5C,gBAAA2C;IAAAA,iBAAA,AAAA1C,eAAA0C;WAAAC,PAAsCG;iBAAtCJ,bAA6CK;AAA7C,AACE,GAAA,AAAAC,cAAQF;AACN,OAACG,cAAiB,CAAA,kDAAuDC;;AACzE,IAAMC,aACA,KAAAC;IAEAC,aACA,AAACC,WACC;AAAA,AACE,OAAQH;GACVI;IAEFC,UACA;AAAA,AACE,AAACC,aAAgBJ;;AACjB,CAAMK,gDAAkBZ;;AACxB,QAACD,yCAAAA,2CAAAA;;IAEHc,OACA;AAAA,AACE,AAACF,aAAgBJ;;AACjB,QAACT,8FAAAA,mHAAAA,vBAAqBC,+FAAAA,tFAASE,+FAAAA;;AAlBvC,OAoBM,gPAAA,hPAACa,MAAS,uDAAA,wDAAA,6FAAA,3MAAK,AAACC,wGAA+Bf,sDAASgB,uFACzC,AAAUX,5PACzB,sRACE,WAASY,xSAIX;AAJE,AACE,oBAAI,AAAMA;AACR,OAACP;;AACD,OAACG;;UACCA;;;AAElB,GAAM,EAAKK,6CAAY,oDAAA,nDAAMC;AAA7B,AAEE,AAAA,CAAA,AAAA,0FAAAC,1FAAaC;;AAAb,CAAA,AAAA,AAAaA,0GAEX,WAAWC,MAAKxF;AAAhB,AAAA,gBAAA,ZAAWwF;AAAX,AACE,OAAC/B,qDAAYzD;;;AAHjB,CAAA,AAAA,yGAAAsF,zGAAaC;;AAAb,CAAA,AAAA,AAAaA,0HAMX,iBAAAE,NAAYD;AAAZ,AAAA,IAAAE,aAAAD;IAAAC,iBAAA,AAAAhF,4BAAAgF;QAAAA,JAAiCC;SAAjC,AAAAhF,4CAAA+E,eAAA,hEAAyBpE;AAAzB,AAAA,gBAAA,ZAAYkE;AAAZ,AACE,OAAC/B,qDAAYnC;;;AAPjB,CAAA,AAAA,AAAaiE,6HASX,mBAAAK,RAAehD,iBAA+BmD,KAAKC;AAAnD,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAnF,4BAAAmF;mBAAA,AAAAlF,4CAAAkF,eAAA,1EAA+BC;AAA/B,AAAA,kBAAA,dAAelD;AAAf,AACE,OAACY,gDACCZ,8LAEKkD,pGACA,AAACG,+CAAOC,7HACR,6CAAA,7CAACC,iMACN,WAAKhG;AAAL,AACE,AAACD,oDAAWC;;AACZ,QAAC4F,qCAAAA,uCAAAA;;;;AAlBT,CAAA,AAAA,AAAaR,gIAoBX,mBAAAa,RAAkBxD,iBAAgEmD,KAAKC;AAAvF,AAAA,IAAAK,aAAAD;IAAAC,iBAAA,AAAA3F,4BAAA2F;UAAAA,NAA6E1E;cAA7E,AAAAhB,4CAAA0F,eAAA,rEAAkClG;wBAAlC,AAAAQ,4CAAA0F,eAAA,/EAA0CC;kBAA1C,AAAA3F,4CAAA0F,eAAA,zEAA4DE;AAA5D,AAAA,kBAAA,dAAkB3D;AAAlB,AACE,IAAM4D,gGAEK,AAACP,+CAAO,WAAAQ,xIAGR,6CAAA,7CAACN;AAHO,AAAA,IAAAO,aAAAD;IAAAC,iBAAA,AAAAhG,4BAAAgG;UAAAA,NAA2BnF;eAA3B,AAAAZ,4CAAA+F,eAAA,tEAAaC;AAAb,AACE,IAAAC,oBAAK,AAACV,qDAAmB3E;AAAzB,AAAA,oBAAAqF;AACK,OAACxC,cAAI,AAACyC,eAAKP,kBAAkBK;;AADlCC;;GAFVzG;AADX,AAOE,GAAA,AAAAiE,cAAQ,AAAC/D,cAAImG;AACX,IAAAM,WAAA;AAAA,AAAA,gFAAAA,2BAAAA,nGAACf,qCAAAA,+CAAAA;;AACD,mFAAA,2CAAA,kDAAA,gFAAA,iGAAA,mRAAA,2CAAA,xpBAACgB,gEAAYnE,yOAENyC,4GACK,6CAAA,7CAACc,8EAAQ,4CAAA,5CAACa,iHAAkBR,uIAGrC,WAAAS;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAxG,4BAAAwG;cAAAA,VAA0BvF;kBAA1B,AAAAhB,4CAAAuG,eAAA,zEAAa/G;AAAb,AACE,IAAA,AACE,AAACD,oDAAWC;;AACZ,QAAC4F,qCAAAA,sDAAAA,nBAAKS,kCAAAA;gBAFR,SAAAW,LAGkBC;AAHlB,AAII,QAACpB,sCAAAA,0CAAAA,NAAMoB,sBAAAA;;;;;AAExB,oDAAA,uIAAA,3LAACC,6NACC,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA7G,4BAAA6G;UAAAA,NAA0BC;cAA1B,AAAA7G,4CAAA4G,eAAA,rEAAa3E;AAAb,AACE,UAAA,2CAAA,jDAAM6E,6GAAc7E;AAApB,AACE,gDAAA,uIAAA,2CAAA,lOAAC8E,wCAAkB9E,2PAEhB;AAAA,AAGE,AAAC+E;;AACD,OAACnG,oFAAa,CAAA,sQAAA,tNAAS,AAAA,6FAAA,gBAAA,AAAA,6FAAIoB,7GAAmBgF;GANnD,uEASG;AAAA,AACE,oBAAA,bAACC;GAVN,mDAAA,2CAAA,sEAcI,WAAKlG;AAAL,AACE,OAAC0C,cACC,CAAA,qFAAA;GAhBR,sFAoBI,WAAK1C;AAAL,AAAA;GApBJ,6EAuBI,WAAKA;AAAL,AAEE,OAACmG,wDAAuB,kDAAA,qDAAA,vGAAChG,8CAAMH;GAzBrC,kFA4BI,WAAKA;AAAL,AAEE,IAAMA,UAAI,AAACoG,qDAAyBpG;AAApC,AACE,AAACgB,+DAAsBC,QAAQjB;;AAC/B,OAACmG,wDAAuB,sDAAA,qDAAA,3GAAChG,8CAAMH;GAhCvC,iFAmCI,WAAKA;AAAL,AAEE,OAACmG,wDAAuB,kDAAA,qDAAA,vGAAChG,8CAAMH;GArCrC,qIAwCI,WAAAqG;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAvH,4BAAAuH;eAAA,AAAAtH,4CAAAsH,eAAA,tEAAaC;gBAAb,AAAAvH,4CAAAsH,eAAA,vEAAsBE;AAAtB,AACE,GACE,EAAK,6CAAA,7CAACC,2HAAqBF,eACtB,AAACE,6CAAED,UAAU9C;AAClB,oBAAA,bAACwC;;AAHH,GAQE,6CAAA,7CAACO,uHAAkBF;AACnB,oBAAA,bAACL;;AATH;;;;;AAWNJ;GAEJ,WAAAY;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAA5H,4BAAA4H;UAAAA,NAA0Bb;cAA1B,AAAA9G,4CAAA2H,eAAA,rEAAa1F;AAAb,AACE,uDAAA,hDAAC2F,wCAAkB3F;;;AAKvB,AAAC8B,WACC;AAAA,AACE,eAAA,XAAMT;AAAN,AAAgB,6DAAA,2CAAA,sDAAA,vJAACuE,qOAAgDC,4CAASC,2CAAQC;;AAAlF,AAKE,oBACE7D;AACA,OAACb;;AAFH,GAIE,EAAK,AAAC5D,cAAIuI,kDAAiB,gDAAA,hDAAClF,4DAAiBkF;AAC7C,OAAC3E;;AALH,GAOE,AAAC5D,cAAIiE;AACL,OAACN,8DACCC,uBACK,gGAAA,hGAAC4E,mDAAUvE,jEACX,AAACwE;;AAXV,AAcE,OAAC7E;;;;;GArBT;;AA5GF","names":["var_args","G__31008","shadow.cljs.devtools.client.react-native/devtools-msg","js/Error","x","shadow.cljs.devtools.client.env/log","js/console.log","y","shadow.cljs.devtools.client.react-native/script-eval","code","js/goog.global.eval","shadow.cljs.devtools.client.react-native/do-js-load","sources","seq__31014","cljs.core/seq","chunk__31015","count__31016","i__31017","map__31037","cljs.core/--destructure-map","cljs.core.get","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__31047","cljs.core/first","cljs.core/next","resource-name","js","src","shadow.cljs.devtools.client.react_native.devtools_msg","shadow.cljs.devtools.client.env/before-load-src","shadow.cljs.devtools.client.react-native/do-js-reload","msg","complete-fn","shadow.cljs.devtools.client.env.do_js_reload","cljs.core.assoc","fn-sym","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.react-native/noop","seq31064","self__4852__auto__","args","p__31092","map__31093","shadow.cljs.devtools.client.react-native/handle-build-complete","runtime","info","reload-info","map__31094","compiled","warnings","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","sources-to-get","shadow.cljs.devtools.client.env/filter-reload-sources","p1__31090#","shadow.cljs.devtools.client.shared/load-sources","shadow.cljs.devtools.client.react-native/global-eval","cljs.core.not_EQ_","js/eval","p__31111","vec__31112","seq__31113","first__31114","shadow.cljs.devtools.client.react-native/attempt-to-find-host","start-fn","host","more-hosts","cljs.core/not","js/console.error","shadow.cljs.devtools.client.env/server-hosts","controller","js/AbortController","timeout-id","js/setTimeout","shadow.cljs.devtools.client.env/connect-timeout","success","js/clearTimeout","shadow.cljs.devtools.client.env/selected-host","fail","js/fetch","shadow.cljs.devtools.client.env/get-server-protocol","shadow.cljs.devtools.client.env/server-port","resp","shadow.cljs.devtools.client.env/enabled","shadow.cljs.devtools.client.env/worker-client-id","cljs.core/PROTOCOL_SENTINEL","shadow.cljs.devtools.client.shared/Runtime","this","p__31130","map__31131","_","p__31137","map__31138","repl-sources","done","error","cljs.core.remove","shadow.cljs.devtools.client.env/src-is-loaded?","cljs.core.into","p__31142","map__31143","reload-namespaces","js-requires","sources-to-load","p__31147","map__31148","provides","and__4251__auto__","cljs.core/some","G__31152","shadow.remote.runtime.shared.call","cljs.core.map","p__31153","map__31154","e31155","ex","shadow.cljs.devtools.client.shared/add-plugin!","p__31156","map__31157","env","svc","shadow.remote.runtime.api/add-extension","shadow.cljs.devtools.client.env/patch-goog!","cljs.core/deref","js/console.warn","shadow.cljs.devtools.client.env/run-custom-notify!","shadow.cljs.devtools.client.env/add-warnings-to-info","p__31167","map__31168","event-op","client-id","cljs.core._EQ_","p__31172","map__31173","shadow.remote.runtime.api/del-extension","shadow.cljs.devtools.client.shared/init-runtime!","shadow.cljs.devtools.client.websocket/start","shadow.cljs.devtools.client.websocket/send","shadow.cljs.devtools.client.websocket/stop","shadow.cljs.devtools.client.env/server-host","clojure.string.split","cljs.core/vec"],"sourcesContent":["(ns shadow.cljs.devtools.client.react-native\n  (:require\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.cljs.devtools.client.shared :as cljs-shared]\n    [shadow.cljs.devtools.client.websocket :as ws]\n    [clojure.string :as str]))\n\n(defn devtools-msg\n  ([x]\n   (when env/log\n     (js/console.log \"shadow-cljs\" x)))\n  ([x y]\n   (when env/log\n     (js/console.log \"shadow-cljs\" x y))))\n\n(defn script-eval [code]\n  (js/goog.global.eval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-name js] :as src} sources]\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn))\n\n(defn noop [& args])\n\n(defn handle-build-complete [runtime {:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled warnings]} info]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n\n      (let [sources-to-get (env/filter-reload-sources info reload-info)]\n\n        (when (seq sources-to-get)\n          (cljs-shared/load-sources runtime sources-to-get #(do-js-reload msg % noop))\n          )))))\n\n(defn global-eval [js]\n  (if (not= \"undefined\" (js* \"typeof(module)\"))\n    ;; don't eval in the global scope in case of :npm-module builds running in webpack\n    (js/eval js)\n    ;; hack to force eval in global scope\n    ;; goog.globalEval doesn't have a return value so can't use that for REPL invokes\n    (js* \"(0,eval)(~{});\" js)))\n\n(defn attempt-to-find-host [start-fn [host & more-hosts]]\n  (if-not host\n    (js/console.error (str \"Could not find shadow-cljs host address, tried \" env/server-hosts))\n    (let [controller\n          (js/AbortController.)\n\n          timeout-id\n          (js/setTimeout\n            (fn []\n              (.abort controller))\n            env/connect-timeout)\n\n          success\n          (fn []\n            (js/clearTimeout timeout-id)\n            (set! env/selected-host host)\n            (start-fn))\n\n          fail\n          (fn []\n            (js/clearTimeout timeout-id)\n            (attempt-to-find-host start-fn more-hosts))]\n\n      (-> (js/fetch (str (env/get-server-protocol) \"://\" host \":\" env/server-port \"/api/project-info\")\n            #js {:signal (.-signal controller)})\n          (.then\n            (fn [^js resp]\n              (if (.-ok resp)\n                (success)\n                (fail))))\n          (.catch fail)))))\n\n(when (and env/enabled (pos? env/worker-client-id))\n\n  (extend-type cljs-shared/Runtime\n    api/IEvalJS\n    (-js-eval [this code]\n      (global-eval code))\n\n    cljs-shared/IHostSpecific\n    (do-invoke [this {:keys [js] :as _}]\n      (global-eval js))\n\n    (do-repl-init [runtime {:keys [repl-sources]} done error]\n      (cljs-shared/load-sources\n        runtime\n        ;; maybe need to load some missing files to init REPL\n        (->> repl-sources\n             (remove env/src-is-loaded?)\n             (into []))\n        (fn [sources]\n          (do-js-load sources)\n          (done))))\n\n    (do-repl-require [runtime {:keys [sources reload-namespaces js-requires] :as msg} done error]\n      (let [sources-to-load\n            (->> sources\n                 (remove (fn [{:keys [provides] :as src}]\n                           (and (env/src-is-loaded? src)\n                                (not (some reload-namespaces provides)))))\n                 (into []))]\n\n        (if-not (seq sources-to-load)\n          (done [])\n          (shared/call runtime\n            {:op :cljs-load-sources\n             :to env/worker-client-id\n             :sources (into [] (map :resource-id) sources-to-load)}\n\n            {:cljs-sources\n             (fn [{:keys [sources] :as msg}]\n               (try\n                 (do-js-load sources)\n                 (done sources-to-load)\n                 (catch :default ex\n                   (error ex))))})))))\n\n  (cljs-shared/add-plugin! ::client #{}\n    (fn [{:keys [runtime] :as env}]\n      (let [svc {:runtime runtime}]\n        (api/add-extension runtime ::client\n          {:on-welcome\n           (fn []\n             ;; FIXME: why does this break stuff when done when the namespace is loaded?\n             ;; why does it have to wait until the websocket is connected?\n             (env/patch-goog!)\n             (devtools-msg (str \"#\" (-> runtime :state-ref deref :client-id) \" ready!\")))\n\n           :on-disconnect\n           (fn []\n             (js/console.warn \"The shadow-cljs Websocket was disconnected.\"))\n\n           :ops\n           {:access-denied\n            (fn [msg]\n              (js/console.error\n                (str \"Stale Output! Your loaded JS was not produced by the running shadow-cljs instance.\"\n                     \" Is the watch for this build running?\")))\n\n            :cljs-build-configure\n            (fn [msg])\n\n            :cljs-build-start\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-start\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-start)))\n\n            :cljs-build-complete\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-complete\" msg)\n              (let [msg (env/add-warnings-to-info msg)]\n                (handle-build-complete runtime msg)\n                (env/run-custom-notify! (assoc msg :type :build-complete))))\n\n            :cljs-build-failure\n            (fn [msg]\n              ;; (js/console.log \"cljs-build-failure\" msg)\n              (env/run-custom-notify! (assoc msg :type :build-failure)))\n\n            ::env/worker-notify\n            (fn [{:keys [event-op client-id]}]\n              (cond\n                (and (= :client-disconnect event-op)\n                     (= client-id env/worker-client-id))\n                (js/console.warn \"The watch for this build was stopped!\")\n\n                ;; FIXME: what are the downside to just resuming on that worker?\n                ;; can't know if it changed something in the build\n                ;; all previous analyzer state is gone and might be out of sync with this instance\n                (= :client-connect event-op)\n                (js/console.warn \"The watch for this build was restarted. Reload required!\")\n                ))}})\n        svc))\n\n    (fn [{:keys [runtime] :as svc}]\n      (api/del-extension runtime ::client)))\n\n\n  ;; delay connecting for a little bit so errors thrown here don't disturb the app during load\n  ;; don't know when errors can actually happen but networks errors somehow seem to break the app\n  (js/setTimeout\n    (fn []\n      (let [start-fn #(cljs-shared/init-runtime! {:host :react-native} ws/start ws/send ws/stop)]\n\n        ;; try all known server ips if no specific host is configured\n        ;; host addr may change at any time eg. wlan switching, different devices\n        ;; so only making them sticky while the app is running, will reset on app reload\n        (cond\n          env/selected-host\n          (start-fn)\n\n          (and (seq env/server-host) (not= \"localhost\" env/server-host))\n          (start-fn)\n\n          (seq env/server-hosts)\n          (attempt-to-find-host\n            start-fn\n            (->> (str/split env/server-hosts \",\")\n                 (vec)))\n\n          :else\n          (start-fn)\n          )))\n    250\n    ))"]}